// ======================================== GENERAL ========================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================== ENUMS ==========================================
enum FoundationType {
  FDD
  FE
  FRUP
}

enum FoundationRole {
  DECLARANT
  ADMIN
  MANAGER
}

// ======================================== Foundation ======================================
model Foundation {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  rnfId      String         @unique
  type       FoundationType @default(FDD)
  department String
  title      String

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int

  // Contact
  phone String
  email String

  // Person
  persons PersonInFoundation[]
}

// ======================================== Address ========================================
model Address {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  label          String
  type           String
  streetAddress  String?
  streetNumber   String?
  streetName     String?
  postalCode     String
  cityName       String
  cityCode       String
  departmentName String?
  departmentCode String
  regionName     String?
  regionCode     String?

  person     Person[]
  foundation Foundation[]
}

// ======================================== Person =========================================
model Person {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastName    String
  firstName   String
  email       String
  phone       String
  profession  String
  nationality String
  bornAt      DateTime
  bornPlace   String

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int

  foundations PersonInFoundation[]
}

// ======================================== Person IN Foundation ===========================
model PersonInFoundation {
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  foundation   Foundation       @relation(fields: [foundationId], references: [id])
  foundationId Int
  person       Person           @relation(fields: [personId], references: [id])
  personId     Int
  roles        FoundationRole[]

  @@id([foundationId, personId])
}

// ======================================== Foundation History ============================
model FoundationHistory {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  rnfId         String
  historyNumber Int
  type          FoundationType @default(FDD)
  department    String
  title         String

  // Contact
  phone String
  email String

  // Person
  persons Json[] // PersonInFoundation[]
  address Json // Address

  // Json from DS API use to create or update foundation
  rawDsJson Json
}

model FileStorage {
  id        Int      @id @default(autoincrement())
  uuid      String   @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  path      String
  originalName String
  checksum String
  byteSize Int
  mimeType String
}
